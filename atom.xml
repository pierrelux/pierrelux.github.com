<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Pierre-Luc Bacon</title>
 <link href="http://pierrelux.github.com/atom.xml" rel="self"/>
 <link href="http://pierrelux.github.com"/>
 <updated>2013-01-17T20:02:13-05:00</updated>
 <id>http://pierrelux.github.com</id>
 <author>
   <name>Pierre-Luc Bacon</name>
   <email>pierrelucbacon@gmail.com</email>
 </author>

 
 <entry>
   <title>Bringing A Virtual Box Machine To The Physical World Over The Network</title>
   <link href="http://pierrelux.github.com/2012/11/25/bringing-a-virtual-box-machine-to-the-physical-world-over-the-network"/>
   <updated>2012-11-25T00:00:00-05:00</updated>
   <id>http://pierrelux.github.com/2012/11/25/bringing-a-virtual-box-machine-to-the-physical-world-over-the-network</id>
   <content type="html">&lt;h2 id='on_the_target_machine'&gt;On the target machine&lt;/h2&gt;

&lt;p&gt;Prior to the following, you would first need to create and boot from a USB stick any sort of linux distro giving you access to &lt;code&gt;netcat&lt;/code&gt; and &lt;code&gt;dd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nc -l 9901 | dd of=/dev/sda&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where /dev/sda corresponds to the drive on which you wish to install the system. If you are unsure, check with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ fdisk -l&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='on_the_virtualbox_host'&gt;On the VirtualBox host&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ VBoxManage internalcommands converttoraw ubuntu1204.vdi ubuntu1204.raw
$ dd if=ubuntu1204.raw | nc 192.168.3.135 9901&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;192.168.3.135&lt;/code&gt; is the IP of the target system running the &lt;code&gt;nc&lt;/code&gt; command.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Asynchronous Timer Expiry Notification</title>
   <link href="http://pierrelux.github.com/2011/11/19/asynchronous-timer-expiry-notification"/>
   <updated>2011-11-19T00:00:00-05:00</updated>
   <id>http://pierrelux.github.com/2011/11/19/asynchronous-timer-expiry-notification</id>
   <content type="html">&lt;p&gt;In some recent TCP experiment that I carried in the user space, I faced the problem of generating relatively precise timer events in an asynchronous way. Furthermore, multiple timers had to be maintained simultaneously.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;timerfd&lt;/code&gt; mechanism in Linux (&lt;code&gt;man timerfd_create(2)&lt;/code&gt;) allows one to create different types of timers that communicate expiry events through a file descriptor. The standard &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;poll()&lt;/code&gt; functions can then be used to detect and process the expiration notifications. As for the clock granularity, with &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; and with High Resolution Timer (HRT) support, I get very respectable 1.000000e-09 seconds on my system. To see this, you can compile (using the &lt;code&gt;-lrt&lt;/code&gt; flag) and run the following :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include
#include
#include

int main(void)
{
printf(&amp;quot;System Clock Granularity %ld\n&amp;quot;, sysconf(_SC_CLK_TCK));

struct timespec gran;
if (clock_getres(CLOCK_MONOTONIC, &amp;amp;gran) &amp;lt; 0) {
    perror(&amp;quot;clock_getres()&amp;quot;);
    return -1;
}
printf(&amp;quot;CLOCK_MONOTONIC granularity %ld %ld\n&amp;quot;, gran.tv_sec, gran.tv_nsec);

return 0;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both periodic and non-periodic timers can be created a timer obtained through timerfd_create(). This behavior is configurable via the itermerspec structure passed as an argument to the &lt;code&gt;timerfd_settime()&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct itimerspec timerSpec;
memset(&amp;amp;timerSpec, 0, sizeof(timerSpec));

timerSpec.it_value.tv_sec = sec;
timerSpec.it_value.tv_nsec = nsec;

timerSpec.it_interval.tv_sec = intsec;
timerSpec.it_interval.tv_nsec = intnsec;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever the it_value field has both its &lt;code&gt;tv_sec&lt;/code&gt; and &lt;code&gt;tv_nsec&lt;/code&gt; fields set to 0, the timer is effectively disarmed and no future timer expiry events should take place.&lt;/p&gt;

&lt;p&gt;Once a timer has been set, &lt;code&gt;read()&lt;/code&gt; will report the number of timer expirations events that have occurred since the last call.&lt;/p&gt;

&lt;h2 id='epoll'&gt;Epoll&lt;/h2&gt;

&lt;p&gt;Having the ability to generate timer events, wouldn&amp;#8217;t be nice if we could only register a callback function that would get call automatically from the outside to handle any processing that would have to be done ?&lt;/p&gt;

&lt;p&gt;Linux provides the epoll functionality which appears much more elegant and easy to use that its traditional &lt;code&gt;select()&lt;/code&gt; counterpart. Even better maybe, it is said to be O(1) versus O(n) : this claim is reported here then taken to Wikipedia and discussed on Stackoverflow.&lt;/p&gt;

&lt;p&gt;One cool thing for sure is its ability to deliver event notifications on the set of file descriptors that it watches under either edge or level-triggered modes. In the first case, &lt;code&gt;epoll_wait()&lt;/code&gt; (normally a blocking call that you would place in a mainloop) will return as long as there is remaining data on one of its file descriptor. By contrast, when one sets the &lt;code&gt;EPOLLONESHOT&lt;/code&gt; flag, &lt;code&gt;epoll_wait()&lt;/code&gt; will generate only one event after which the associated file descriptor will be disabled. Cooking up the final solution&lt;/p&gt;

&lt;p&gt;Before going any further : yes libevent exists and also uses epoll. The point here is not to use it.&lt;/p&gt;

&lt;p&gt;Back to the initial goal of generating timer expiry notifications asynchronously via callbacks, we only have to register the file descriptor associated with our instantiated &lt;code&gt;timerfd&lt;/code&gt; elements to epoll with &lt;code&gt;epoll_ctl()&lt;/code&gt; and the &lt;code&gt;EPOLL_CTL_ADD&lt;/code&gt; flag. Then run the &lt;code&gt;epoll_wait()&lt;/code&gt; in a loop and you almost have a complete solution.&lt;/p&gt;

&lt;p&gt;Two problems then remain : how do you keep track of which callback function (together with the arguments to pass) goes with a given timer, and finally how do you avoid blocking you application on &lt;code&gt;epoll_wait()&lt;/code&gt; ? The latter can be easily solved by wrapping our mainloop in a thread (with the necessary thread-safety precautions): DONE. For the former, &lt;code&gt;epoll_ctl()&lt;/code&gt; delights us with its &lt;code&gt;epoll_data_t&lt;/code&gt; union member of the epoll_event structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef union epoll_data {
    void        *ptr;
    int          fd;
    uint32_t     u32;
    uint64_t     u64;
} epoll_data_t;

struct epoll_event {
    uint32_t     events;      /* Epoll events */
    epoll_data_t data;        /* User data variable */
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;void *ptr&lt;/code&gt; you said ? Yep that&amp;#8217;s it : here&amp;#8217;s our function pointer. Since epoll_data is a union, we will probably want to record more than one element under ptr. To do so, we can wrap all the information we need under a structure such as :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {
  int tfd;
  void (*timed_action_handler)(void*);
  void* arg;
} timed_action_t;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when &lt;code&gt;epoll_wait()&lt;/code&gt; unblocks we will be able to get access to the associated &lt;code&gt;epoll_event&lt;/code&gt; and execute the callback passing its arg argument from the &lt;code&gt;timed_action_t&lt;/code&gt; structure.&lt;/p&gt;

&lt;h2 id='github'&gt;GitHub&lt;/h2&gt;

&lt;p&gt;You can checkout a sketch of the approach explained above at &lt;a href='https://github.com/pierrelux/timedaction'&gt;https://github.com/pierrelux/timedaction&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Applying A Function To Every Row Or Column Of A Matrix In Matlab</title>
   <link href="http://pierrelux.github.com/2011/10/12/Applying-a-function-to-every-row-or-column-of-a-matrix-in-Matlab"/>
   <updated>2011-10-12T00:00:00-04:00</updated>
   <id>http://pierrelux.github.com/2011/10/12/Applying-a-function-to-every-row-or-column-of-a-matrix-in-Matlab</id>
   <content type="html">&lt;p&gt;Sure we have arrayfun, but it applies a function every element of a matrix. What if we want to compute the sum over each row or column for example ?&lt;/p&gt;

&lt;p&gt;The trick that I&amp;#8217;m presenting here lies in the use of the &lt;code&gt;num2cell&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In the example below, we add a 1x4 vector to every row of a matrix A.&amp;#160;&amp;#187; A = magic(4) A =&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;16     2     3    13
 5    11    10     8
 9     7     6    12
 4    14    15     1

&amp;gt;&amp;gt; y = [1 2 3 4];
&amp;gt;&amp;gt; B = cellfun(@(x)(x + y), num2cell(A, 2), ‘UniformOutput’, false)

B = 

[1x4 double]
[1x4 double]
[1x4 double]
[1x4 double]

&amp;gt;&amp;gt; cell2mat(B)

ans =

17     4     6    17
 6    13    13    12
10     9     9    16
 5    16    18     5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to do a similar operation but this time over the columns, we would write &lt;code&gt;num2cell(A, 1)&lt;/code&gt; : &amp;#8220;1&amp;#8221; instead of &amp;#8220;2&amp;#8221;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Indexing Diagonal Matrix Elements In Matlab</title>
   <link href="http://pierrelux.github.com/2011/09/28/indexing-diagonal-matrix-elements-in-matlab"/>
   <updated>2011-09-28T00:00:00-04:00</updated>
   <id>http://pierrelux.github.com/2011/09/28/indexing-diagonal-matrix-elements-in-matlab</id>
   <content type="html">&lt;p&gt;I have came across this problem very often, but always ended up solving it in a different way each time. Here is what looks to me to be the most concise way of doing it.&lt;/p&gt;

&lt;h2 id='indexing_the_diagonal'&gt;Indexing the diagonal&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; A = magic(4)
A =
16     2     3    13
 5    11    10     8
 9     7     6    12
 4    14    15     1

&amp;gt;&amp;gt; A(1:length(A)+1:numel(A))
ans =
16    11     6     1

&amp;gt;&amp;gt; A(1:length(A)+1:numel(A)) = 1
A =
 1     2     3    13
 5     1    10     8
 9     7     1    12
 4    14    15     1&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='selecting_offdiagonal_entries'&gt;Selecting off-diagonal entries&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; A = magic(4)
A =
16     2     3    13
 5    11    10     8
 9     7     6    12
 4    14    15     1

&amp;gt;&amp;gt; A(setdiff(1:numel(A), 1:length(A)+1:numel(A))) = 0
A =
16     0     0     0
 0    11     0     0
 0     0     6     0
 0     0     0     1
&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 
</feed>